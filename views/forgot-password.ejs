<%- include('partials/header') %>
<%- include('partials/navbar') %>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="auth-card">
                <div class="auth-header">
                    <i class="fas fa-key auth-icon"></i>
                    <h2>Reset Password</h2>
                </div>
                <div class="auth-body">
                    <div id="step1" class="step">
                        <form id="emailForm">
                            <div class="form-group mb-3">
                                <label for="email" class="form-label">
                                    <i class="fas fa-envelope"></i> Email Address
                                </label>
                                <input type="email" class="form-control custom-input" id="email" name="email" required>
                            </div>
                            <button type="submit" class="btn custom-btn w-100" id="sendOtpBtn">
                                <i class="fas fa-paper-plane me-2"></i> Send OTP
                            </button>
                        </form>
                    </div>
                    <div id="step2" class="step" style="display: none;">
                        <div id="timer" class="text-center mb-3 text-warning">
                            Time remaining: <span id="countdown">60</span>s
                        </div>
                        <form id="otpForm" class="text-center">
                            <div class="form-group mb-3">
                                <label for="otp" class="form-label">
                                    <i class="fas fa-lock"></i> OTP Verification
                                </label>
                                <div class="d-flex justify-content-center mb-3">
                                    <input type="text" class="form-control custom-input mx-1" id="otp1" name="otp1" required maxlength="1" style="width: 50px; height: 50px; font-size: 24px; text-align: center;" oninput="moveToNext(this, 'otp2')">
                                    <input type="text" class="form-control custom-input mx-1" id="otp2" name="otp2" required maxlength="1" style="width: 50px; height: 50px; font-size: 24px; text-align: center;" oninput="moveToNext(this, 'otp3')">
                                    <input type="text" class="form-control custom-input mx-1" id="otp3" name="otp3" required maxlength="1" style="width: 50px; height: 50px; font-size: 24px; text-align: center;" oninput="moveToNext(this, 'otp4')">
                                    <input type="text" class="form-control custom-input mx-1" id="otp4" name="otp4" required maxlength="1" style="width: 50px; height: 50px; font-size: 24px; text-align: center;" oninput="moveToNext(this, 'otp5')">
                                    <input type="text" class="form-control custom-input mx-1" id="otp5" name="otp5" required maxlength="1" style="width: 50px; height: 50px; font-size: 24px; text-align: center;" oninput="moveToNext(this, 'otp6')">
                                    <input type="text" class="form-control custom-input mx-1" id="otp6" name="otp6" required maxlength="1" style="width: 50px; height: 50px; font-size: 24px; text-align: center;" oninput="moveToNext(this, null)">
                                </div>
                            </div>
                            <button type="submit" class="btn custom-btn w-100">
                                <i class="fas fa-check me-2"></i> Verify
                            </button>
                            
                        </form>
                    </div>
                    <script>
                        function moveToNext(current, nextId) {
                            validateOTPInput(current);
                            if (current.value.length >= 1) {
                                if (nextId) {
                                    document.getElementById(nextId).focus();
                                } else {
                                    const allFilled = Array.from({ length: 6 }, (_, i) => 
                                        document.getElementById(`otp${i + 1}`).value
                                    ).every(value => value.length === 1);
                                    
                                    if (allFilled) {
                                        document.querySelector('#otpForm button[type="submit"]').focus();
                                    }
                                }
                            }
                        }

                        function validateOTPInput(input) {
                            input.value = input.value.replace(/[^0-9]/g, '');
                        }
                    </script>

                    <div id="step3" class="step" style="display: none;">
                        <form id="passwordForm">
                            <div class="form-group mb-3">
                                <label for="newPassword" class="form-label">
                                    <i class="fas fa-lock"></i> New Password
                                </label>
                                <div class="input-group">
                                    <input type="password" class="form-control custom-input" id="newPassword" name="newPassword" required>
                                    <span class="input-group-text" onclick="togglePasswordVisibility('newPassword')">
                                        <i class="fas fa-eye" id="newPasswordIcon"></i>
                                    </span>
                                </div>
                                <small id="newPasswordStrength" class="text-danger">Password Strength: Weak</small>
                            </div>
                            <div class="form-group mb-3">
                                <label for="confirmPassword" class="form-label">
                                    <i class="fas fa-lock"></i> Confirm Password
                                </label>
                                <div class="input-group">
                                    <input type="password" class="form-control custom-input" id="confirmPassword" name="confirmPassword" required>
                                    <span class="input-group-text" onclick="togglePasswordVisibility('confirmPassword')">
                                        <i class="fas fa-eye" id="confirmPasswordIcon"></i>
                                    </span>
                                </div>
                                
                            </div>
                            <script>
                                function togglePasswordVisibility(inputId) {
                                    const input = document.getElementById(inputId);
                                    const icon = document.getElementById(inputId + 'Icon');
                                    if (input.type === 'password') {
                                        input.type = 'text';
                                        icon.classList.remove('fa-eye');
                                        icon.classList.add('fa-eye-slash');
                                    } else {
                                        input.type = 'password';
                                        icon.classList.remove('fa-eye-slash');
                                        icon.classList.add('fa-eye');
                                    }
                                }
                            </script>
                            <button type="submit" class="btn custom-btn w-100">
                                <i class="fas fa-save me-2"></i> Reset Password
                            </button>
                        </form>
                    </div>

                    <div id="alert" class="alert mt-3" style="display: none;"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
let userEmail = '';
let timer;
let warningThreshold = 10; // Show warning when 10 seconds remain

function showAlert(message, type) {
    const alert = document.getElementById('alert');
    alert.className = `alert alert-${type} success-animation`;
    alert.innerHTML = message;
    alert.style.display = 'block';
    
    // Auto hide after 5 seconds
    setTimeout(() => {
        alert.style.display = 'none';
    }, 5000);
}

function startTimer() {
    let timeLeft = 60;
    const timerSpan = document.getElementById('countdown');
    const verifyButton = document.querySelector('#otpForm button[type="submit"]');
    
    timer = setInterval(() => {
        timeLeft--;
        updateTimerDisplay(timeLeft);
        
        if (timeLeft <= 0) {
            clearInterval(timer);
            showAlert('OTP has expired. Page will refresh in 2 seconds...', 'warning');
            verifyButton.disabled = true;
            
            // Disable and fade out OTP inputs
            document.querySelectorAll('#otpForm input[type="text"]').forEach(input => {
                input.disabled = true;
                input.classList.add('disabled-input');
            });
            
            // Add fade out animation
            const authCard = document.querySelector('.auth-card');
            authCard.style.opacity = '0.5';
            
            // Show refresh loader
            const loader = document.createElement('div');
            loader.className = 'loader-overlay';
            loader.innerHTML = `
                <div class="loader-content">
                    <div class="loader"></div>
                    <div class="loader-text">
                        Refreshing page<span class="loader-dots"></span>
                    </div>
                </div>
            `;
            document.body.appendChild(loader);
            
            // Refresh after delay
            setTimeout(() => {
                window.location.reload();
            }, 2000);
        }
    }, 1000);
}

function updateTimerDisplay(timeLeft) {
    const timerSpan = document.getElementById('countdown');
    const timerContainer = document.getElementById('timer');
    
    timerSpan.textContent = timeLeft;
    
    if (timeLeft <= warningThreshold) {
        timerContainer.classList.add('expiring');
        // Make the timer more prominent in the last few seconds
        timerSpan.style.fontSize = '1.6rem';
        timerSpan.style.color = '#ff6363';
    }
}

document.getElementById('emailForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    userEmail = document.getElementById('email').value;
    const sendOtpBtn = document.getElementById('sendOtpBtn');
    
    // Create and show enhanced loader
    const loader = document.createElement('div');
    loader.className = 'loader-overlay';
    loader.innerHTML = `
        <div class="loader-content">
            <div class="loader"></div>
            <div class="loader-text">
                Sending OTP<span class="loader-dots"></span>
            </div>
        </div>
    `;
    document.body.appendChild(loader);
    
    // Disable button and show loading state
    sendOtpBtn.disabled = true;
    sendOtpBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i> Sending...';
    
    try {
        const response = await fetch('/forgot-password', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email: userEmail })
        });
        
        const data = await response.json();
        
        // Remove loader with fade out effect
        loader.style.transition = 'opacity 0.3s ease';
        loader.style.opacity = '0';
        setTimeout(() => loader.remove(), 300);
        
        if (response.ok) {
            // Show success message with animation
            showAlert(`<i class="fas fa-check-circle me-2"></i> ${data.message}`, 'success');
            
            // Wait for 1.5 seconds before moving to next step
            setTimeout(() => {
                document.getElementById('step1').style.display = 'none';
                document.getElementById('step2').style.display = 'block';
                startTimer();
            }, 1500);
        } else {
            // Show error message with animation
            showAlert(`<i class="fas fa-exclamation-circle me-2"></i> ${data.error}`, 'danger');
            sendOtpBtn.disabled = false;
            sendOtpBtn.innerHTML = '<i class="fas fa-paper-plane me-2"></i> Send OTP';
        }
    } catch (error) {
        // Remove loader and show error
        loader.style.transition = 'opacity 0.3s ease';
        loader.style.opacity = '0';
        setTimeout(() => loader.remove(), 300);
        
        showAlert('<i class="fas fa-exclamation-triangle me-2"></i> Error sending OTP', 'danger');
        sendOtpBtn.disabled = false;
        sendOtpBtn.innerHTML = '<i class="fas fa-paper-plane me-2"></i> Send OTP';
    }
});

document.getElementById('otpForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const otp = Array.from({ length: 6 }, (_, i) => 
        document.getElementById(`otp${i + 1}`).value
    ).join('');
    
    if (otp.length !== 6) {
        showAlert('Please enter complete OTP', 'warning');
        return;
    }
    
    try {
        const response = await fetch('/verify-otp', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email: userEmail, otp })
        });
        
        const data = await response.json();
        
        if (response.ok) {
            clearInterval(timer);
            document.getElementById('step2').style.display = 'none';
            document.getElementById('step3').style.display = 'block';
            showAlert('OTP verified successfully', 'success');
        } else {
            showAlert(data.error, 'danger');
        }
    } catch (error) {
        showAlert('Error verifying OTP', 'danger');
    }
});

document.getElementById('passwordForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const newPassword = document.getElementById('newPassword').value;
    const confirmPassword = document.getElementById('confirmPassword').value;
    
    if (newPassword.length < 6) {
        showAlert('Password must be at least 6 characters long', 'warning');
        return;
    }
    
    if (newPassword !== confirmPassword) {
        showAlert('Passwords do not match', 'danger');
        return;
    }
    
    try {
        const resetButton = e.target.querySelector('button[type="submit"]');
        resetButton.disabled = true;
        resetButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i> Resetting...';
        
        const response = await fetch('/reset-password', {
            method: 'POST',
            headers: { 
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({ 
                email: userEmail, 
                newPassword,
                otp: Array.from({ length: 6 }, (_, i) => document.getElementById(`otp${i + 1}`).value).join('')
            })
        });
        
        const data = await response.json();
        
        if (response.ok) {
            showAlert('Password reset successful! Redirecting to login...', 'success');
            setTimeout(() => {
                window.location.href = '/signin';
            }, 2000);
        } else {
            resetButton.disabled = false;
            resetButton.innerHTML = '<i class="fas fa-save me-2"></i> Reset Password';
            showAlert(data.error || 'Error resetting password', 'danger');
        }
    } catch (error) {
        const resetButton = e.target.querySelector('button[type="submit"]');
        resetButton.disabled = false;
        resetButton.innerHTML = '<i class="fas fa-save me-2"></i> Reset Password';
        showAlert('Error resetting password. Please try again.', 'danger');
    }
});

document.getElementById('newPassword').addEventListener('input', function() {
    const password = this.value;
    const existingIndicator = document.getElementById('newPasswordStrength');
    
    if (password.length > 0) {
        let strength = 0;
        
        // Check password strength criteria
        if (password.length >= 8) strength += 1;
        if (password.match(/[a-z]/) && password.match(/[A-Z]/)) strength += 1;
        if (password.match(/\d/)) strength += 1;
        if (password.match(/[^a-zA-Z\d]/)) strength += 1;
        
        let strengthText = '';
        let strengthClass = '';
        
        switch (strength) {
            case 0:
            case 1:
                strengthText = 'Weak';
                strengthClass = 'text-danger';
                break;
            case 2:
                strengthText = 'Medium';
                strengthClass = 'text-warning';
                break;
            case 3:
                strengthText = 'Strong';
                strengthClass = 'text-info';
                break;
            case 4:
                strengthText = 'Very Strong';
                strengthClass = 'text-success';
                break;
        }
        
        existingIndicator.className = strengthClass;
        existingIndicator.innerHTML = `<i class="fas fa-shield-alt"></i> Password Strength: ${strengthText}`;
    } else {
        existingIndicator.className = 'text-danger';
        existingIndicator.innerHTML = 'Password Strength: Weak';
    }
});

document.querySelectorAll('.step').forEach(step => {
    if (step.style.display !== 'none') {
        step.style.opacity = '0';
        setTimeout(() => {
            step.style.opacity = '1';
        }, 100);
    }
});

document.querySelectorAll('#otpForm input[type="text"]').forEach((input, index) => {
    input.addEventListener('keydown', (e) => {
        if (e.key === 'Backspace' && !input.value && index > 0) {
            document.getElementById(`otp${index}`).focus();
        }
    });
});
</script>

<style>
.auth-card {
    background: linear-gradient(145deg, #1a1a1a, #2d2d2d);
    border-radius: 15px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
    padding: 2rem;
    border: 1px solid rgba(255, 255, 255, 0.1);
    transition: opacity 0.5s ease;
}

.auth-header {
    text-align: center;
    margin-bottom: 2rem;
    padding-bottom: 1.5rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.auth-icon {
    font-size: 2.5rem;
    color: #00ff9d;
    margin-bottom: 1rem;
    animation: glow 2s ease-in-out infinite alternate;
}

.auth-header h2 {
    color: #ffffff;
    font-weight: 600;
    letter-spacing: 1px;
}

.custom-input {
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    color: #ffffff;
    padding: 12px;
    transition: all 0.3s ease;
}

.custom-input:focus {
    background: #fff;
    border-color: #00ff9d;
    box-shadow: 0 0 15px rgba(0, 255, 157, 0.2);
}

.custom-btn {
    background: linear-gradient(45deg, #00ff9d, #00b8ff);
    border: none;
    border-radius: 8px;
    color: #000;
    font-weight: 600;
    padding: 12px;
    transition: all 0.3s ease;
    text-transform: uppercase;
    letter-spacing: 1px;
}

.custom-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(0, 255, 157, 0.3);
}

.custom-btn:disabled {
    background: linear-gradient(45deg, #666, #999);
    cursor: not-allowed;
    transform: none !important;
    box-shadow: none !important;
    opacity: 0.7;
}

/* OTP Input Styling */
.otp-container input {
    background: rgba(255, 255, 255, 0.05);
    border: 2px solid rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    color: #00ff9d;
    font-family: 'Courier New', monospace;
    font-weight: bold;
    transition: all 0.3s ease;
}

.otp-container input:focus {
    border-color: #00ff9d;
    box-shadow: 0 0 15px rgba(0, 255, 157, 0.2);
    transform: scale(1.05);
}

.otp-container input:disabled {
    background: rgba(255, 255, 255, 0.02);
    border-color: rgba(255, 255, 255, 0.05);
    color: #666;
    cursor: not-allowed;
}

#timer {
    background: linear-gradient(45deg, #ff6b6b, #ff9f43);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    font-family: 'Courier New', monospace;
    font-size: 1.4rem;
    font-weight: bold;
    transition: color 0.3s ease;
}

#timer.expiring {
    color: #ff6363;
    animation: pulse 1s infinite;
}

@keyframes pulse {
    0% { opacity: 1; }
    50% { opacity: 0.5; }
    100% { opacity: 1; }
}

.custom-link {
    color: #00ff9d;
    text-decoration: none;
    transition: all 0.3s ease;
}

.custom-link:hover {
    color: #00b8ff;
    text-shadow: 0 0 10px rgba(0, 255, 157, 0.5);
}

@keyframes glow {
    from {
        text-shadow: 0 0 10px rgba(0, 255, 157, 0.5),
                     0 0 20px rgba(0, 255, 157, 0.3);
    }
    to {
        text-shadow: 0 0 15px rgba(0, 255, 157, 0.7),
                     0 0 30px rgba(0, 255, 157, 0.5);
    }
}

.step {
    opacity: 0;
    transform: translateY(20px);
    animation: fadeInUp 0.5s ease forwards;
}

@keyframes fadeInUp {
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.form-label {
    color: #ffffff;
    font-weight: 500;
    margin-bottom: 0.5rem;
    display: flex;
    align-items: center;
    gap: 8px;
}

.form-label i {
    color: #00ff9d;
}

.password-strength {
    font-size: 0.85rem;
    animation: fadeIn 0.3s ease;
}

@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

.fa-spinner {
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.loader-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(26, 26, 26, 0.95);
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    backdrop-filter: blur(5px);
}

.loader-content {
    text-align: center;
}

.loader {
    width: 80px;
    height: 80px;
    border: 4px solid rgba(0, 255, 157, 0.1);
    border-radius: 50%;
    border-left-color: #00ff9d;
    animation: loader-spin 1s linear infinite;
    margin-bottom: 20px;
}

.loader-text {
    color: #00ff9d;
    font-family: 'Courier New', monospace;
    font-size: 1.2rem;
    margin-top: 1rem;
    letter-spacing: 0.1em;
}

.loader-dots {
    display: inline-block;
}

.loader-dots::after {
    content: '';
    animation: loader-dots 1.5s infinite;
}

@keyframes loader-spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

@keyframes loader-dots {
    0% { content: '.'; }
    33% { content: '..'; }
    66% { content: '...'; }
    100% { content: '.'; }
}

.success-animation {
    animation: scaleUp 0.5s ease forwards;
}

@keyframes scaleUp {
    from {
        transform: scale(0);
        opacity: 0;
    }
    to {
        transform: scale(1);
        opacity: 1;
    }
}

.alert {
    border: none;
    border-radius: 8px;
    padding: 1rem;
    margin-top: 1rem;
    animation: slideIn 0.3s ease;
}

.alert-success {
    background: rgba(0, 255, 157, 0.1);
    border-left: 4px solid #00ff9d;
    color: #00ff9d;
}

.alert-danger {
    background: rgba(255, 99, 99, 0.1);
    border-left: 4px solid #ff6363;
    color: #ff6363;
}

@keyframes slideIn {
    from {
        transform: translateY(-10px);
        opacity: 0;
    }
    to {
        transform: translateY(0);
        opacity: 1;
    }
}

.disabled-input {
    opacity: 0.5;
    cursor: not-allowed;
    background: rgba(255, 255, 255, 0.05) !important;
}

@keyframes fadeOut {
    from { opacity: 1; }
    to { opacity: 0.5; }
}
</style>

<%- include('partials/footer') %>